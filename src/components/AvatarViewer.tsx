import React, { useState, useRef, useEffect } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, useGLTF } from '@react-three/drei';
import { Group, SkinnedMesh, Object3D, Material, BufferGeometry } from 'three';
import * as THREE from 'three';

const ModelPath = '/office-lady.glb';

interface GLTFResult {
  nodes: {
    Hips: Object3D;
    Wolf3D_Body: SkinnedMesh<BufferGeometry, Material>;
    Wolf3D_Outfit_Bottom: SkinnedMesh<BufferGeometry, Material>;
    Wolf3D_Outfit_Footwear: SkinnedMesh<BufferGeometry, Material>;
    Wolf3D_Outfit_Top: SkinnedMesh<BufferGeometry, Material>;
    Wolf3D_Hair: SkinnedMesh<BufferGeometry, Material>;
    EyeLeft: SkinnedMesh<BufferGeometry, Material>;
    EyeRight: SkinnedMesh<BufferGeometry, Material>;
    Wolf3D_Head: SkinnedMesh<BufferGeometry, Material>;
    Wolf3D_Teeth: SkinnedMesh<BufferGeometry, Material>;
  };
  materials: {
    Wolf3D_Body: Material;
    Wolf3D_Outfit_Bottom: Material;
    Wolf3D_Outfit_Footwear: Material;
    Wolf3D_Outfit_Top: Material;
    Wolf3D_Hair: Material;
    Wolf3D_Eye: Material;
    Wolf3D_Skin: Material;
    Wolf3D_Teeth: Material;
  };
}
interface MorphTargets {
  [key: string]: number;
}

interface AvatarProps {
  readonly morphTargets: MorphTargets;
}

interface GLTFNodes {
  Hips: THREE.Object3D;
  Wolf3D_Body: THREE.SkinnedMesh;
  Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;
  Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;
  Wolf3D_Outfit_Top: THREE.SkinnedMesh;
  Wolf3D_Hair: THREE.SkinnedMesh;
  EyeLeft: THREE.SkinnedMesh & {
    morphTargetDictionary: { [key: string]: number };
    morphTargetInfluences: number[];
  };
  EyeRight: THREE.SkinnedMesh & {
    morphTargetDictionary: { [key: string]: number };
    morphTargetInfluences: number[];
  };
  Wolf3D_Head: THREE.SkinnedMesh & {
    morphTargetDictionary: { [key: string]: number };
    morphTargetInfluences: number[];
  };
  Wolf3D_Teeth: THREE.SkinnedMesh & {
    morphTargetDictionary: { [key: string]: number };
    morphTargetInfluences: number[];
  };
}

interface GLTFMaterials {
  Wolf3D_Body: Material;
  Wolf3D_Outfit_Bottom: Material;
  Wolf3D_Outfit_Footwear: Material;
  Wolf3D_Outfit_Top: Material;
  Wolf3D_Hair: Material;
  Wolf3D_Eye: Material;
  Wolf3D_Skin: Material;
  Wolf3D_Teeth: Material;
}

export function AvatarViewer({ morphTargets }: AvatarProps) {
  const group = useRef<Group>(null);

  // Update morph target influences when they change
  useEffect(() => {
    const head = group.current?.getObjectByName('Wolf3D_Head') as SkinnedMesh;
    console.log("UseEffect: ", head);
    if (head?.morphTargetDictionary && head?.morphTargetInfluences) {
      Object.entries(morphTargets).forEach(([name, value]) => {
        if (head.morphTargetDictionary) {
          console.log("morphTargets: ", morphTargets);
          const index = head.morphTargetDictionary[name];
          if (typeof index !== 'undefined') {
            if (head.morphTargetInfluences) {
              head.morphTargetInfluences[index] = value;
            }
          }
        }
      });
    }
  }, [morphTargets]);

  return (
    <div className="avatar-container">
      <Canvas
        style={{ width: '100%', height: '500px' }}
        camera={{ position: [0, 1.5, 1], fov: 50 }}
      >
        <ambientLight intensity={0.5} />
        <directionalLight position={[0, 5, 5]} scale={2} />
        <Model position={[0, -1.6, 0.5]} />
        <OrbitControls
          maxPolarAngle={2}
          minPolarAngle={1.5}
          minDistance={0.95}
          maxDistance={0.9}
        />
      </Canvas>
    </div>
  );
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { GroupProps } from '@react-three/fiber';

export function Model(props: GroupProps) {
  const group = useRef<Group>(null);
  const { nodes, materials } = useGLTF('/office-lady.glb') as unknown as {
    nodes: GLTFNodes;
    materials: GLTFMaterials;
  };

  return (
    <group ref={group} dispose={null} rotation={[0, 0, 0]} {...props}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload(ModelPath)
